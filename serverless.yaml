# Read the documentation at https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: photowalkboston
frameworkVersion: ^3.16.0

provider:
  name: aws
  # The AWS region in which to deploy (us-east-1 is the default)
  region: us-east-1
  # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
  stage: dev
  runtime: provided.al2
  deploymentMethod: direct
  environment:
    # Symfony environment variables
    APP_ENV: ${opt:stage}
    UPLOADS_BUCKET: !Ref UploadsBucket
    UPLOADS_CLOUDFRONT_URL: !Sub 'https://${UploadsDistribution.DomainName}'
    ADMIN_USERNAME: ${self:custom.${opt:stage}.credentials.ADMIN_USERNAME}
    ADMIN_PASSWORD: ${self:custom.${opt:stage}.credentials.ADMIN_PASSWORD}
  vpc:
    securityGroupIds:
      - ${cf:vpc.LambdaSecurityGroup}
      - ${cf:filesystem-${opt:stage}.EfsSecurityGroup}
    subnetIds:
      - ${cf:vpc.PublicSubnet1}
  iam:
    role:
      statements:
        - Effect: Allow
          Resource:
            - !Sub '${UploadsBucket.Arn}'
            - !Sub '${UploadsBucket.Arn}/*'
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectAttributes
            - s3:DeleteObject
            - s3:ListBucket

plugins:
  - ./vendor/bref/bref
  - serverless-lift
  - serverless-plugin-log-retention

custom:
  logRetentionInDays: 30
  hostedZoneId: ${ssm:/route53/photowalkboston/hostedZoneId}
  dev:
    domain: dev.photowalkboston.com
    credentials:
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: 123

  prod:
    domain: photowalkboston.com
    credentials: ${ssm:/aws/reference/secretsmanager/prod/photowalkboston/admin-credentials}

functions:
  # This function runs the Symfony website/API
  web:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-82-fpm}
    events:
      - httpApi: '*'
    fileSystemConfig:
      localMountPath: "/mnt/sqlite"
      arn: ${cf:filesystem-${opt:stage}.FilesystemAccessPointArn}

  # This function let us run console commands in Lambda
  console:
    handler: bin/console
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-82} # PHP
      - ${bref:layer.console} # The "console" layer
    fileSystemConfig:
      localMountPath: "/mnt/sqlite"
      arn: ${cf:filesystem-${opt:stage}.FilesystemAccessPointArn}

constructs:
  website:
    type: server-side-website
    domain: ${self:custom.${opt:stage}.domain}
    certificate: ${ssm:/acm/photowalkboston/certificate/arn}
    assets:
      '/bundles/*': public/bundles
      '/css/*': public/css
      '/iconic/*': public/iconic
      '/images/*': public/images
      '/js/*': public/js

package:
  patterns:
    # Excluded files and folders for deployment
    - '!assets/**'
    - '!node_modules/**'
    - '!public/build/**'
    - '!tests/**'
    - '!var/**'
    - '!config/aws/**'
    # If you want to include files and folders that are part of excluded folders,
    # add them at the end
    - 'var/cache/prod/**'
    - 'public/build/entrypoints.json'
    - 'public/build/manifest.json'

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: photowalk-boston-uploads-${opt:stage}
        AccessControl: Private

    UploadsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref UploadsBucket
        PolicyDocument:
          Statement:
            - Sid: AllowGetFromCloudfront
              Effect: Allow
              Action: s3:GetObject
              Resource: !Sub 'arn:aws:s3:::${UploadsBucket}/*'
              Principal:
                AWS:
                  - !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${UploadsDistributionOAI.Id}"

    UploadsDistributionOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'OAI for CloudFront access to s3'

    UploadsDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: PWB uploads
          Origins:
            - DomainName: !GetAtt UploadsBucket.RegionalDomainName
              Id: 's3-origin'
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${UploadsDistributionOAI.Id}"
          PriceClass: PriceClass_100
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: 's3-origin'
            ViewerProtocolPolicy: 'redirect-to-https'
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: all

    # Website domain
    Route53Record:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        Name: ${self:custom.${opt:stage}.domain}
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Cloudfront Route53 HostedZoneId. This does not change.
          DNSName: ${construct:website.cname}
